if SERVER then
	util.AddNetworkString( "nzMapDoorCreation" )
	util.AddNetworkString( "nzPropDoorCreation" )
	util.AddNetworkString( "nzAllDoorsLocked" )
	util.AddNetworkString( "nzDoorOpened" )
	util.AddNetworkString( "nzClearDoorData" )

	function CleanFlagTable(flags)
		local newFlags = {}
		newFlags["link"] = flags["link"]
		newFlags["buyable"] = tobool(flags["buyable"])
		newFlags["price"] = flags["price"]
		newFlags["elec"] = tobool(flags["elec"])
		newFlags["rebuyable"] = tobool(flags["rebuyable"])

		return newFlags
	end

	function nzDoors:SendMapDoorCreation( door, flags, id, ply )
		if IsValid(door) then

			flags = CleanFlagTable(flags)
			net.Start("nzMapDoorCreation")
				net.WriteBool(true)
				net.WriteInt(door:EntIndex(), 13)
				net.WriteTable(flags or {})
				net.WriteString(flags["link"] or "")
				net.WriteString(flags["price"] or "0")
				net.WriteBool(flags["buyable"] or false)
				net.WriteBool(flags["elec"] or false)
				net.WriteBool(flags["rebuyable"] or false)
				net.WriteInt(id or 0, 13)
			return ply and net.Send(ply) or net.Broadcast()
		end
	end

	function nzDoors:SendPropDoorCreation( ent, flags, ply )
		if IsValid(ent) then
			flags = CleanFlagTable(flags)
			net.Start("nzPropDoorCreation")
				net.WriteBool(true)
				net.WriteInt(ent:EntIndex(), 13)
				net.WriteTable(flags or {})
				net.WriteString(flags["link"] or "")
				net.WriteString(flags["price"] or "0")
				net.WriteBool(flags["buyable"] or false)
				net.WriteBool(flags["elec"] or false)
				net.WriteBool(flags["rebuyable"] or false)
			return ply and net.Send(ply) or net.Broadcast()
		end
	end
@@ -51,7 +73,6 @@ if SERVER then

	function nzDoors:SendDoorOpened( door, rebuyable, ply )
		net.Start("nzDoorOpened")
			print(door:EntIndex(), door)
			net.WriteBool(IsValid(door) and door:IsPropDoorType())
			net.WriteInt(door:EntIndex(), 13)
			net.WriteBool(rebuyable and tobool(rebuyable) or false)
@@ -91,12 +112,25 @@ if CLIENT then
	nzDoors.MapCreationIndexTable = nzDoors.MapCreationIndexTable or {}
	nzDoors.DisplayLinks = nzDoors.DisplayLinks or {}

	function BoolToIntString(bool)
		if bool and isbool(bool) then
			return "1"
		else
			return "0"
		end
	end

	local function ReceiveMapDoorCreation()
		local bool = net.ReadBool()
		local index = net.ReadInt(13)
		-- True if door is created, false if removed
		if bool then
			local tbl = net.ReadTable()
			local tbl = {} --net.ReadTable()
			tbl["link"] = net.ReadString()
			tbl["price"] = net.ReadString()
			tbl["buyable"] = BoolToIntString(net.ReadBool())
			tbl["elec"] = BoolToIntString(net.ReadBool())
			tbl["rebuyable"] = BoolToIntString(net.ReadBool())
			nzDoors.MapCreationIndexTable[index] = net.ReadInt(13)
			nzDoors:SetDoorDataByID( nzDoors.MapCreationIndexTable[index], false, tbl )
			nzDoors:SetLockedByID( index, false, true )
@@ -119,7 +153,12 @@ if CLIENT then
		--local ent = Entity(index)
		-- True if door is created, false if removed
		if bool then
			local tbl = net.ReadTable()
			local tbl = {}--net.ReadTable()
			tbl["link"] = net.ReadString()
			tbl["price"] = net.ReadString()
			tbl["buyable"] = BoolToIntString(net.ReadBool())
			tbl["elec"] = BoolToIntString(net.ReadBool())
			tbl["rebuyable"] = BoolToIntString(net.ReadBool())
			nzDoors:SetDoorDataByID( index, true, tbl )
			nzDoors:SetLockedByID( index, true, true )
			--ent:SetDoorData(tbl)
  19 changes: 8 additions & 11 deletions19  
gamemodes/nzombies/gamemode/round/sh_sync.lua
Original file line number	Diff line number	Diff line change
@@ -6,42 +6,37 @@ if SERVER then
	util.AddNetworkString( "nzPlayerPlayingState" )

	function nzRound:SendNumber( number, ply )

		net.Start( "nzRoundNumber" )
			net.WriteInt( number or 0, 16 )
		return ply and net.Send( ply ) or net.Broadcast()

	end

	function nzRound:SendState( state, ply )

		net.Start( "nzRoundState" )
			net.WriteUInt( state or ROUND_WAITING, 3 )
		return ply and net.Send( ply ) or net.Broadcast()

	end

	function nzRound:SendSpecialRound( bool, ply )

		net.Start( "nzRoundSpecial" )
			net.WriteBool( bool or false )
		return ply and net.Send( ply ) or net.Broadcast()

	end

	function nzRound:SendReadyState( ply, state, recieverPly )

		net.Start( "nzPlayerReadyState" )
			net.WriteEntity( ply )
			net.WriteUInt(ply:EntIndex(), 511)
			net.WriteBool( state )
		return recieverPly and net.Send( recieverPly ) or net.Broadcast()

	end

	function nzRound:SendPlayingState( ply, state, recieverPly )

		net.Start( "nzPlayerPlayingState" )
			net.WriteEntity( ply )
			net.WriteUInt(ply:EntIndex(), 511)
			net.WriteBool( state )
		return recieverPly and net.Send( recieverPly ) or net.Broadcast()

@@ -92,17 +87,19 @@ if CLIENT then


	local function receivePlayerReadyState()
		local ply = net.ReadEntity()
		local ply = ents.GetByIndex(net.ReadUInt(511))
		local state = net.ReadBool()
		if IsValid(ply) then
			ply:SetReady( net.ReadBool() )
			ply:SetReady( state )
		end
	end
	net.Receive( "nzPlayerReadyState", receivePlayerReadyState )

	local function receivePlayerPlayingState()
		local ply = net.ReadEntity()
		local ply = ents.GetByIndex(net.ReadUInt(511))
		local state = net.ReadBool()
		if IsValid(ply) then
			ply:SetPlaying( net.ReadBool() )
			ply:SetPlaying( state )
		end
	end
	net.Receive( "nzPlayerPlayingState", receivePlayerPlayingState )
